# 导入模块
from ortools.constraint_solver import pywrapcp
from ortools.constraint_solver import routing_enums_pb2
DISTANCES = [
    ['0', '122476', '1229869', '987941', '682963', '294125', '491658', '487353', '1210971', '1277042', '1867253', '2114801', '2627876', '1023736', '690797', '1002497', '409437', '1436024', '1193164', '1193164', '1074438', '3548859', '2779905', '1835076', '1753571', '2346302', '2086066', '2587861', '1161356', '1477547', '1431143', '2203897', '2273144'],
    ['122476', '0', '1201742', '959814', '654836', '314982', '614846', '508210', '1093989', '1217026', '1814186', '2112350', '2625425', '956379', '711654', '935319', '342726', '1483762', '1146196', '1146196', '1095295', '3596597', '2903093', '1855933', '1774428', '2343851', '2083615', '2585410', '1158905', '1475096', '1358857', '2201446', '2270693'],
    ['1229869', '1201742', '0', '244488', '551085', '1493810', '1684809', '1687038', '2269863', '2392900', '2989879', '3301640', '3814715', '2132072', '1890482', '2111193', '1518600', '2634602', '2386315', '2386315', '2274123', '4747437', '3973056', '3034761', '2953256', '3533141', '3272905', '3774700', '2348195', '2664386', '2534550', '3390736', '3459983'],
    ['987941', '959814', '244488', '0', '310181', '1252906', '1431315', '1446134', '2028959', '2151996', '2748975', '3060736', '3573811', '1891168', '1649578', '1870289', '1277696', '2393698', '2132821', '2132821', '2033219', '4506533', '3719562', '2793857', '2712352', '3292237', '3032001', '3533796', '2107291', '2423482', '2293646', '3149832', '3219079'],
    ['682963', '654836', '551085', '310181', '0', '950093', '1171538', '1143321', '1726146', '1849183', '2446162', '2757923', '3270998', '1588355', '1346765', '1567476', '974883', '2090885', '1753319', '1753319', '1730406', '4203720', '3459785', '2491044', '2409539', '2989424', '2729188', '3230983', '1804478', '2120669', '1990833', '2847019', '2916266'],
    ['294125', '314982', '1493810', '1252906', '950093', '0', '594851', '214615', '1170170', '1180721', '1687844', '1855375', '2368450', '888447', '423416', '906176', '334696', '1198067', '927565', '927565', '791258', '3310902', '2887289', '1551896', '1470391', '2086876', '1826211', '2260044', '909276', '1218121', '1243653', '1974526', '2013718'],
    ['491658', '614846', '1684809', '1431315', '1171538', '594851', '0', '443246', '1703117', '1724699', '2273946', '2305225', '2811139', '1474549', '882350', '1450154', '871374', '1122610', '714173', '714173', '969574', '3235445', '2300914', '1728512', '1664862', '2529565', '2046276', '2436660', '1393252', '1681446', '1738006', '2458502', '2463568'],
    ['487353', '508210', '1687038', '1446134', '1143321', '214615', '443246', '0', '1365196', '1357544', '1819081', '1869888', '2375802', '1019684', '447013', '1082999', '535847', '992238', '721736', '721736', '610839', '3105073', '2737040', '1371477', '1289972', '2094228', '1671386', '2079625', '957915', '1246109', '1302669', '2023165', '2028231'],
    ['1210971', '1093989', '2269863', '2028959', '1726146', '1170170', '1703117', '1365196', '0', '179942', '766205', '1430436', '2031457', '460323', '939925', '300126', '827062', '1997565', '1975560', '1975560', '1371668', '4128003', '3914510', '1956341', '1702128', '1904381', '1816148', '2317943', '835747', '1081808', '700706', '1493623', '1563775'],
    ['1277042', '1217026', '2392900', '2151996', '1849183', '1180721', '1724699', '1357544', '179942', '0', '623237', '1246518', '1847539', '407754', '927970', '281354', '877380', '1944996', '1957012', '1957012', '1319099', '4075434', '3861941', '1885005', '1621852', '1720463', '1669561', '2183377', '755471', '889395', '515972', '1309705', '1379857'],
    ['1867253', '1814186', '2989879', '2748975', '2446162', '1687844', '2273946', '1819081', '766205', '623237', '0', '881419', '1428822', '873928', '1369939', '912946', '1503086', '2262489', '2341466', '2341466', '1636592', '4017619', '4179434', '1994720', '1743410', '1444027', '1567408', '2082503', '891724', '845608', '546197', '848710', '948348'],
    ['2114801', '2112350', '3301640', '3060736', '2757923', '1855375', '2305225', '1869888', '1430436', '1246518', '881419', '0', '575406', '1211536', '1465962', '1359779', '1818834', '2251892', '2330869', '2330869', '1625995', '3458360', '4168837', '1581801', '1293041', '566800', '909989', '1341800', '963961', '665817', '783023', '168978', '160972'],
    ['2627876', '2625425', '3814715', '3573811', '3270998', '2368450', '2811139', '2375802', '2031457', '1847539', '1428822', '575406', '0', '1774053', '1959998', '1922296', '2338900', '2497342', '2788096', '2788096', '2083222', '3403620', '4405420', '1700876', '1405482', '485498', '1033615', '1216344', '1484027', '1175712', '1345540', '700104', '596171'],
    ['1023736', '956379', '2132072', '1891168', '1588355', '888447', '1474549', '1019684', '460323', '407754', '873928', '1211536', '1774053', '0', '570619', '166155', '647121', '1553975', '1632952', '1632952', '928078', '3684413', '3470920', '1512751', '1244120', '1599512', '1438117', '1939912', '395042', '730757', '444491', '1283593', '1353745'],
    ['690797', '711654', '1890482', '1649578', '1346765', '423416', '882350', '447013', '939925', '927970', '1369939', '1465962', '1959998', '570619', '0', '652053', '443840', '1093123', '1043343', '1043343', '475357', '3223561', '3010068', '1236106', '1154601', '1690310', '1429645', '1931440', '512710', '821555', '857464', '1577960', '1617152'],
    ['1002497', '935319', '2111193', '1870289', '1567476', '906176', '1450154', '1082999', '300126', '281354', '912946', '1359779', '1922296', '166155', '652053', '0', '626323', '1718613', '1682835', '1682835', '1092716', '3849051', '3635558', '1665559', '1396928', '1751162', '1590925', '2092720', '547850', '882407', '596693', '1433969', '1504121'],
    ['409437', '342726', '1518600', '1277696', '974883', '334696', '871374', '535847', '827062', '877380', '1503086', '1818834', '2338900', '647121', '443840', '626323', '0', '1410254', '1139752', '1139752', '900512', '3523089', '3164684', '1661261', '1550091', '2046442', '1797508', '2299303', '858207', '1177687', '1064743', '1900748', '1973284'],
    ['1436024', '1483762', '2634602', '2393698', '2090885', '1198067', '1122610', '992238', '1997565', '1944996', '2262489', '2251892', '2497342', '1553975', '1093123', '1718613', '1410254', '0', '427944', '427944', '634983', '2131272', '1915809', '975617', '1087724', '2017406', '1481155', '1790871', '1367382', '1627168', '1727418', '2404872', '2409290'],
    ['1193164', '1146196', '2386315', '2132821', '1753319', '927565', '714173', '721736', '1975560', '1957012', '2341466', '2330869', '2788096', '1632952', '1043343', '1682835', '1139752', '427944', '0', '896', '710484', '2539441', '2010965', '1286130', '1253297', '2182979', '1646728', '1994278', '1441833', '1701619', '1801869', '2479323', '2483741'],
    ['1193164', '1146196', '2386315', '2132821', '1753319', '927565', '714173', '721736', '1975560', '1957012', '2341466', '2330869', '2788096', '1632952', '1043343', '1682835', '1139752', '427944', '896', '0', '710484', '2539441', '2010965', '1286130', '1253297', '2182979', '1646728', '1994278', '1441833', '1701619', '1801869', '2479323', '2483741'],
    ['1074438', '1095295', '2274123', '2033219', '1730406', '791258', '969574', '610839', '1371668', '1319099', '1636592', '1625995', '2083222', '928078', '475357', '1092716', '900512', '634983', '710484', '710484', '0', '2767362', '2553869', '775889', '690978', '1608643', '1072392', '1484037', '740806', '1000592', '1100842', '1778296', '1782714'],
    ['3548859', '3596597', '4747437', '4506533', '4203720', '3310902', '3235445', '3105073', '4128003', '4075434', '4017619', '3458360', '3403620', '3684413', '3223561', '3849051', '3523089', '2131272', '2539441', '2539441', '2767362', '0', '2689020', '1992559', '2272211', '2962662', '2545739', '2188273', '3502041', '3157022', '3433608', '3630295', '3627977'],
    ['2779905', '2903093', '3973056', '3719562', '3459785', '2887289', '2300914', '2737040', '3914510', '3861941', '4179434', '4168837', '4405420', '3470920', '3010068', '3635558', '3164684', '1915809', '2010965', '2010965', '2553869', '2689020', '0', '2879752', '2991859', '3921541', '3385290', '3695006', '3280138', '3539924', '3640174', '4317628', '4322046'],
    ['1835076', '1855933', '3034761', '2793857', '2491044', '1551896', '1728512', '1371477', '1956341', '1885005', '1994720', '1581801', '1700876', '1512751', '1236106', '1665559', '1661261', '975617', '1286130', '1286130', '775889', '1992559', '2879752', '0', '303312', '1224927', '660608', '856259', '1137121', '1184770', '1458130', '1761599', '1719942'],
    ['1753571', '1774428', '2953256', '2712352', '2409539', '1470391', '1664862', '1289972', '1702128', '1621852', '1743410', '1293041', '1405482', '1244120', '1154601', '1396928', '1550091', '1087724', '1253297', '1253297', '690978', '2272211', '2991859', '303312', '0', '926597', '383549', '838042', '904849', '897207', '1253616', '1465624', '1423967'],
    ['2346302', '2343851', '3533141', '3292237', '2989424', '2086876', '2529565', '2094228', '1904381', '1720463', '1444027', '566800', '485498', '1599512', '1690310', '1751162', '2046442', '2017406', '2182979', '2182979', '1608643', '2962662', '3921541', '1224927', '926597', '0', '547054', '775821', '1192261', '883946', '1208103', '758110', '744929'],
    ['2086066', '2083615', '3272905', '3032001', '2729188', '1826211', '2046276', '1671386', '1816148', '1669561', '1567408', '909989', '1033615', '1438117', '1429645', '1590925', '1797508', '1481155', '1646728', '1646728', '1072392', '2545739', '3385290', '660608', '383549', '547054', '0', '519303', '1049418', '807527', '1160208', '1083915', '1042258'],
    ['2587861', '2585410', '3774700', '3533796', '3230983', '2260044', '2436660', '2079625', '2317943', '2183377', '2082503', '1341800', '1216344', '1939912', '1931440', '2092720', '2299303', '1790871', '1994278', '1994278', '1484037', '2188273', '3695006', '856259', '838042', '775821', '519303', '0', '1553480', '1311589', '1667998', '1502196', '1441495'],
    ['1161356', '1158905', '2348195', '2107291', '1804478', '909276', '1393252', '957915', '835747', '755471', '891724', '963961', '1484027', '395042', '512710', '547850', '858207', '1367382', '1441833', '1441833', '740806', '3502041', '3280138', '1137121', '904849', '1192261', '1049418', '1553480', '0', '325491', '355077', '1081896', '1121088'],
    ['1477547', '1475096', '2664386', '2423482', '2120669', '1218121', '1681446', '1246109', '1081808', '889395', '845608', '665817', '1175712', '730757', '821555', '882407', '1177687', '1627168', '1701619', '1701619', '1000592', '3157022', '3539924', '1184770', '897207', '883946', '807527', '1311589', '325491', '0', '354217', '817897', '822315'],
    ['1431143', '1358857', '2534550', '2293646', '1990833', '1243653', '1738006', '1302669', '700706', '515972', '546197', '783023', '1345540', '444491', '857464', '596693', '1064743', '1727418', '1801869', '1801869', '1100842', '3433608', '3640174', '1458130', '1253616', '1208103', '1160208', '1667998', '355077', '354217', '0', '858848', '929000'],
    ['1431143', '1358857', '2534550', '2293646', '1990833', '1243653', '1738006', '1302669', '700706', '515972', '546197', '783023', '1345540', '444491', '857464', '596693', '1064743', '1727418', '1801869', '1801869', '1100842', '3433608', '3640174', '1458130', '1253616', '1208103', '1160208', '1667998', '355077', '354217', '1', '0', '929000'],
    ['2273144', '2270693', '3459983', '3219079', '2916266', '2013718', '2463568', '2028231', '1563775', '1379857', '948348', '160972', '596171', '1353745', '1617152', '1504121', '1973284', '2409290', '2483741', '2483741', '1782714', '3627977', '4322046', '1719942', '1423967', '744929', '1042258', '1441495', '1121088', '822315', '929000', '929000', '0'],
]

# 创建数据集
def create_data_model():
    data = {}
    # Array of distances between locations.
    _distances = DISTANCES

    # 每个节点的需求量，0表示起始节点没有需求
    # demands = [0, 1, 1, 2, 4, 2, 4, 8, 8, 1, 2, 1, 2, 4, 4, 8, 8]
    demands = [0] + [1] * (len(DISTANCES) - 1)
    # 有4辆车，每辆车的最大装载容量
    # capacities = [15, 15, 15, 15]
    # 各个节点之间的距离矩阵
    data["distances"] = _distances
    data["distance_matrix"] = _distances
    
    # 节点数量
    data["num_locations"] = len(_distances)
    # 车辆数量
    data["num_vehicles"] = 4
    # 仓库索引，我们假设所有的车辆都从同一地点出发，也就是车场。
    # 或者，你可以允许车辆在任何位置启动和结束。
    data["depot"] = 0
    data["demands"] = demands
    # data["vehicle_capacities"] = capacities
    return data


# 回调函数，用于计算两个节点间的距离
# 和前面的VRP问题一样的理解
def create_distance_callback(data):
    """Creates callback to return distance between points."""
    distances = data["distances"]

    def distance_callback(from_node, to_node):
        """Returns the manhattan distance between the two nodes"""
        return distances[from_node][to_node]

    return distance_callback

# 回调函数，用于计算容量限制或节点需求量
# 可以这么理解，既然有距离的回调函数，那么就有容量或需求的回调函数
def create_demand_callback(data):
    """Creates callback to get demands at each location."""

    def demand_callback(from_node, to_node):
        return data["demands"][from_node]

    return demand_callback

# # 容量约束限制
# def add_capacity_constraints(routing, data, demand_callback):
#     """Adds capacity constraint"""
#     capacity = "Capacity"
#     routing.AddDimensionWithVehicleCapacity(
#         demand_callback,
#         0,  # null capacity slack
#         data["vehicle_capacities"],  # vehicle maximum capacities
#         True,  # 从累积到零，意思应该和“装了这么多剩余空间还能装多少”差不多吧
#         capacity)


# 打印每辆车的路线(访问的位置)，以及路线的距离。
# 请注意，这些距离包括从仓库到路线中第一个位置的距离以及从最后一个位置返回到仓库的距离。
# IndexToNode, NextVar 函数和前面的tsp问题是相同的意思
def print_solution(data, routing, assignment):
    """Print routes on console."""
    total_dist = 0
    for vehicle_id in range(data["num_vehicles"]):
        index = routing.Start(vehicle_id)
        plan_output = 'Route for vehicle {0}:\n'.format(vehicle_id)
        route_dist = 0
        route_load = 0
        while not routing.IsEnd(index):
            node_index = routing.IndexToNode(index)
            next_node_index = routing.IndexToNode(assignment.Value(routing.NextVar(index)))
            route_dist += routing.GetArcCostForVehicle(node_index, next_node_index, vehicle_id)
            route_load += data["demands"][node_index]
            plan_output += ' {0} Load({1}) -> '.format(node_index, route_load)
            index = assignment.Value(routing.NextVar(index))

        node_index = routing.IndexToNode(index)
        total_dist += route_dist
        plan_output += ' {0} Load({1})\n'.format(node_index, route_load)
        plan_output += 'Distance of the route: {0}m\n'.format(route_dist)
        plan_output += 'Load of the route: {0}\n'.format(route_load)
        print(plan_output)
    print('Total Distance of all routes: {0}m'.format(total_dist))


# 输出路径规划
def print_solution(data, manager, routing, solution):
    print(f'Objective: {solution.ObjectiveValue()}')
    total_distance = 0
    for vehicle_id in range(data['num_vehicles']):
        index = routing.Start(vehicle_id)
        plan_output = 'Route for vehicle {}:\n'.format(vehicle_id)
        route_distance = 0
        while not routing.IsEnd(index):
            plan_output += ' {} -> '.format(manager.IndexToNode(index))
            previous_index = index
            index = solution.Value(routing.NextVar(index))
            route_distance += routing.GetArcCostForVehicle(
                previous_index, index, vehicle_id)
        plan_output += '{}\n'.format(manager.IndexToNode(index))
        plan_output += 'Distance of the route: {}m\n'.format(route_distance)
        print(plan_output)
        total_distance += route_distance
    print('Total Distance of all routes: {}m'.format(total_distance))

# 主函数
def main():

    # 创建数据集
    data = create_data_model()

    # 初始化路由模型
    manager = pywrapcp.RoutingIndexManager(
        len(data['distance_matrix']),
        data['num_vehicles'],
        data['depot'],
    )

    # 创建Routing Model.
    routing = pywrapcp.RoutingModel(manager)

    # 两点之间距离 回调函数
    def distance_callback(from_index, to_index):
        # Convert from routing variable Index to distance matrix NodeIndex.
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return data['distance_matrix'][from_node][to_node]

    # 创建距离回调函数，用于计算两个节点之间的距离
    transit_callback_index = routing.RegisterTransitCallback(distance_callback)
    # 对所有的车辆，采用相同的distance_callback的计算
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    # 添加距离约束
    dimension_name = 'Distance'
    routing.AddDimension(
        routing.RegisterTransitCallback(distance_callback),
        0,  # no slack
        10000,  # 车的最大行驶距离
        True,  # start cumul to zero
        dimension_name)
    distance_dimension = routing.GetDimensionOrDie(dimension_name)
    distance_dimension.SetGlobalSpanCostCoefficient(100)

    # Setting first solution heuristic (cheapest addition).
    # 设置初始的启发式算法
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.PARALLEL_CHEAPEST_INSERTION)


    # Solve the problem.
    # 求解并打印
    assignment = routing.SolveWithParameters(search_parameters)
    if assignment:
        print_solution(data, manager, routing, assignment)

    '''
    # output:
    Objective: 0
Route for vehicle 0:
 0 ->  32 ->  31 ->  30 ->  29 ->  28 ->  27 ->  26 ->  25 ->  24 ->  23 ->  22 ->  21 ->  20 ->  19 ->  18 ->  17 ->  16 ->  15 ->  14 ->  13 ->  12 ->  11 ->  10 ->  9 ->  8 ->  7 ->  6 ->  5 ->  4 ->  3 ->  2 ->  1 -> 0
Distance of the route: 0m

Route for vehicle 1:
 0 -> 0
Distance of the route: 0m

Route for vehicle 2:
 0 -> 0
Distance of the route: 0m

Route for vehicle 3:
 0 -> 0
Distance of the route: 0m

Total Distance of all routes: 0m
    '''

if __name__ == '__main__':
    main()
